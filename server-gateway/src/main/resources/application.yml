server:
  port: 80
spring:
  application:
    name: api-gateway
  redis:
    host: 192.168.200.128
    port: 6379
    database: 0
    timeout: 1800000
    password:
  cloud:
    nacos:
      discovery:
        server-addr: 192.168.200.128:8848
    gateway:
      discovery:      #是否与服务发现组件进行结合，通过 serviceId(必须设置成大写) 转发到具体的服务实例。默认为false，设为true便开启通过服务中心的自动根据 serviceId 创建路由的功能。
        locator:      #路由访问方式：http://Gateway_HOST:Gateway_PORT/大写的serviceId/**，其中微服务应用名默认大写访问。
          enabled: true
      routes:
        - id: service-product #后台系统网关
          uri: lb://service-product
          predicates:
            - Path=/*/product/** # 路径匹配
        - id: service-item
          uri: lb://service-item
          predicates:
            - Path=/*/item/**
        - id: web-item
          uri: lb://web-all
          predicates:
            - Host=item.gmall.com #通过域名匹配 通过这个域名访问网关item.gmall.com 跳转到web-all模块
        - id: web-index #商城首页
          uri: lb://web-all
          predicates:
            - Host=www.gmall.com
        - id: web-list #全文搜索后的web前端商品展示页面
          uri: lb://web-all
          predicates:
            - Host=list.gmall.com
        - id: service-user #用户点击登录后进行验证模块
          uri: lb://service-user
          predicates:
            - Path=/*/user/**
        - id: web-passport #展现前端登录页面
          uri: lb://web-all
          predicates:
            - Host=passport.gmall.com
        - id: web-cart #展现前端登录页面负载均衡web all
          uri: lb://web-all
          predicates:
            - Host=cart.gmall.com
        - id: service-cart #负载均衡service-cart
          uri: lb://service-cart
          predicates:
            - Path=/*/cart/**
        - id: web-order
          uri: lb://web-all
          predicates:
            - Host=order.gmall.com
        - id: service-order
          uri: lb://service-order
          predicates:
            - Path=/*/order/**
        - id: web-payment #前端通过域名访问支付相关页面
          uri: lb://web-all
          predicates:
            - Host=payment.gmall.com
        - id: service-payment #前端直接发送请求访问支付模块
          uri: lb://service-payment
          predicates:
            - Path=/*/payment/** # 路径匹配
        - id: web-activity #前端通过域名访问秒杀页面
          uri: lb://web-all
          predicates:
            - Host=activity.gmall.com
        - id: service-activity #前端直接发送请求访问秒杀后台模块
          uri: lb://service-activity
          predicates:
            - Path=/*/activity/** # 路径匹配
          filters: #秒杀模块限流
          - name: RequestRateLimiter #filter名称必须是RequestRateLimiter
            args:
              redis-rate-limiter.replenishRate: 2 #允许用户每秒处理多少个请求
              redis-rate-limiter.burstCapacity: 2 #令牌桶的容量，允许在一秒钟内完成的最大请求数
              key-resolver: "#{@ipKeyResolver}" #引用bean来配制 它使用 SpEL 表达式根据#{@beanName}从 Spring 容器中获取 Bean 对象。





# 规定用户访问哪些控制器需要登录。
authUrls:
  url: trade.html,myOrder.html #,list.html

